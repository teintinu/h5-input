- require('./input.less');
- import {EditStore, EditStoreField} from 'EditStore'

- property store: EditStore
- property field: string
- property rowSpan: number = 1
- property colSpan: number = 1

- var meta: EditStoreField = store.fields[field]

td(
  class= 'h_input_td',
  colSpan= colSpan,
  rowSpan=rowSpan,
  onTouchTap= focusHandler)

  label(
    class = {
      h_Input_LabelComValue: has_focus() || has_value(),
      h_Input_LabelSemValue: !(has_focus() || has_value()),
      focus: has_focus() && !has_error(),
      erro: has_error(),
    })= meta.labelText

  if !has_value() && has_focus()
    label(
         class={
           h_Input_LabelSemValue: true,
           erro: has_error()
         }
      )= meta.hintText

  input(
      name = field,
      type = meta.type,
      value = meta.value,
      title = meta.disabled || meta.hintText,
      hintText = meta.hintText,
      errorText = meta.errorText,
      class = 'h_input',
      ref = 'h_input_' + field,
      autoFocus = store.focus == meta,
      disabled= meta.disabled,
      onFocus = focusHandler,
      onChange = changeHandler,
      onBlur = blurHandler  
    )

  hr(class={
      h_input_hr: true,
      h_input_hr_error: has_error()
    })

  if (has_focus())
    hr(class={
      h_input_hr_focus : true,
      h_input_hr_focus_error: has_error()
    })

  if (has_error())
    span(class= 'h_input_labelError')= meta.errorText


script.

  function changeHandler(ev: any) {
    meta.value = ev.target.value;
    this.setState({});
  }

  function focusHandler() {
    store.focus = meta;
    this.setState({});
  }

  function blurHandler(ev: any) {
    if (store.focus == meta)
      store.focus=null;
    meta.value = ev.target.value;
    meta.validate()
    this.setState({
    });
  }

  function has_focus(){
    return store.focus == meta
  }
  function has_error(){
    return !!meta.errorText
  }

  function has_value(){
    return !!meta.value
  }
